{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "An element to extract data from JSON or XML responses.\n\nThe `request` is ARC request object as described in\nhttps://github.com/advanced-rest-client/api-components-api/blob/master/docs/\napi-request-and-response.md#api-request document.\nIt should contain at lease `url`, `method`, `headers`, and `payload`\n\nThe `response` is a \"response\" property of the `api-response` custom event\nas described in\nhttps://github.com/advanced-rest-client/api-components-api/blob/master/docs/\napi-request-and-response.md#api-response.\nIt should contain `status`, `payload`, `headers` and `url` properties.\nThe `url` property should be the final request URL after all redirects.\n\nNote: This element uses `URLSearchParams` class which is relatively new\ninterface in current browsers. You may need to provide a polyfill if you\nare planning to use this component in older browsers.",
      "summary": "",
      "path": "request-data-extractor.js",
      "properties": [
        {
          "name": "request",
          "type": "Object | null | undefined",
          "description": "ARC request object",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 367,
              "column": 6
            },
            "end": {
              "line": 367,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "response",
          "type": "Object | null | undefined",
          "description": "ARC response object",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 371,
              "column": 6
            },
            "end": {
              "line": 371,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "pathDelimiter",
          "type": "string | null | undefined",
          "description": "Source path delimiter",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 375,
              "column": 6
            },
            "end": {
              "line": 378,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\".\""
        },
        {
          "name": "path",
          "type": "(Array.<String> | String)",
          "description": "Source data path. Either array of path segments\nor full path as string.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 385,
              "column": 6
            },
            "end": {
              "line": 385,
              "column": 18
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "extract",
          "description": "Gets the data from selected path.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 395,
              "column": 2
            },
            "end": {
              "line": 424,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "iterator",
              "type": "Object",
              "description": "Iterator model. Used only with response body."
            }
          ],
          "return": {
            "type": "(String | Number | undefined)",
            "desc": "Data to be processed"
          }
        },
        {
          "name": "_getDataUrl",
          "description": "Returns the value for path for given source object",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 432,
              "column": 2
            },
            "end": {
              "line": 445,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "String",
              "description": "An url to parse."
            },
            {
              "name": "path",
              "type": "?Array.<String>",
              "description": "Path to the object"
            }
          ],
          "return": {
            "type": "(String | URLSearchParams)",
            "desc": "Value for the path."
          }
        },
        {
          "name": "_readUrlQueryValue",
          "description": "Reads value of the URL query parameters.\n\nThe `?` at the beginning of the query string is removed.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 457,
              "column": 2
            },
            "end": {
              "line": 470,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "URL",
              "description": "The URL object instance"
            },
            {
              "name": "param",
              "type": "?String",
              "description": "Param name to return. If not set then it returns\nwhole query string value."
            }
          ],
          "return": {
            "type": "String",
            "desc": "Full query string value if `param` is not set or paramter\nvalue. This function does not returns `null` values."
          }
        },
        {
          "name": "_readUrlHashValue",
          "description": "Reads value of the URL hash.\n\nThe `#` at the beginning of the hash string is removed.\n\nIf the `param` argument is set then it treats hahs value as a query\nparameters string and parses it to get the value.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 484,
              "column": 2
            },
            "end": {
              "line": 495,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "URL",
              "description": "The URL object instance"
            },
            {
              "name": "param",
              "type": "?String",
              "description": "Param name to return. If not set then it returns\nwhole hash string value."
            }
          ],
          "return": {
            "type": "String",
            "desc": "Hash parameter or whole hash value."
          }
        },
        {
          "name": "_getDataHeaders",
          "description": "Returns a value for the headers.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 503,
              "column": 2
            },
            "end": {
              "line": 514,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "source",
              "type": "(Request | Response)",
              "description": "An object to read the url value from."
            },
            {
              "name": "path",
              "type": "?Array.<String>",
              "description": "Path to the object"
            }
          ],
          "return": {
            "type": "(Headers | String)",
            "desc": "Value for the path."
          }
        },
        {
          "name": "_getPayloadValue",
          "description": "Gets a value from a text for current path. Path is part of the\nconfiguration object passed to the constructor.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 526,
              "column": 2
            },
            "end": {
              "line": 541,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data",
              "type": "String",
              "description": "Payload value."
            },
            {
              "name": "contentType",
              "type": "String",
              "description": "Body content type."
            },
            {
              "name": "path",
              "type": "Array.<String>",
              "description": "Remaining path to follow"
            },
            {
              "name": "iterator",
              "type": "Object",
              "description": "Iterator model"
            }
          ],
          "return": {
            "type": "(String | undefined)",
            "desc": "Value for given path."
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 361,
          "column": 7
        },
        "end": {
          "line": 542,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "LogicElements.RequestDataExtractor",
      "attributes": [
        {
          "name": "request",
          "description": "ARC request object",
          "sourceRange": {
            "start": {
              "line": 367,
              "column": 6
            },
            "end": {
              "line": 367,
              "column": 21
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "response",
          "description": "ARC response object",
          "sourceRange": {
            "start": {
              "line": 371,
              "column": 6
            },
            "end": {
              "line": 371,
              "column": 22
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "path-delimiter",
          "description": "Source path delimiter",
          "sourceRange": {
            "start": {
              "line": 375,
              "column": 6
            },
            "end": {
              "line": 378,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "path",
          "description": "Source data path. Either array of path segments\nor full path as string.",
          "sourceRange": {
            "start": {
              "line": 385,
              "column": 6
            },
            "end": {
              "line": 385,
              "column": 18
            }
          },
          "metadata": {},
          "type": "(Array.<String> | String)"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "request-data-extractor",
      "mixins": [
        "HeadersParserMixin"
      ]
    },
    {
      "description": "An element that performs a logic condition check defined in request / response\nactions for ARC.",
      "summary": "",
      "path": "request-logic-condition.js",
      "properties": [
        {
          "name": "extractor",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 2
            },
            "end": {
              "line": 57,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "enabled",
          "type": "boolean | null | undefined",
          "description": "A flag to determine if the condition is enabled.\nWhen set the `satisfied()` function always returns `false`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 30,
              "column": 6
            },
            "end": {
              "line": 30,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "source",
          "type": "string | null | undefined",
          "description": "Condition data source",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 6
            },
            "end": {
              "line": 34,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "operator",
          "type": "string | null | undefined",
          "description": "The comparator name",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 6
            },
            "end": {
              "line": 38,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "condition",
          "type": "string | null | undefined",
          "description": "A value to test against the source value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "satisfied",
          "description": "Checks if the condition has been satified for current request and response\nobjects.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 2
            },
            "end": {
              "line": 79,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "The ARC request object. Comnatins `url`, `method`,\n`headers` and `payload` (all strings)"
            },
            {
              "name": "response",
              "type": "Object",
              "description": "{Object} ARC Response object as defined in\nhttps://github.com/advanced-rest-client/api-components-api/blob/master/\ndocs/api-request-and-response.md"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if the condition is satisfied and false otherwise."
          }
        },
        {
          "name": "checkCondition",
          "description": "Checks if given condition is satisfied by both value and operator.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 2
            },
            "end": {
              "line": 99,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "any",
              "description": "Value rread from the response / request object"
            },
            {
              "name": "operator",
              "type": "String",
              "description": "Comparition term."
            },
            {
              "name": "condition",
              "type": "String",
              "description": "Value to compare."
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if the condition is satisfied and false otherwise."
          }
        },
        {
          "name": "isEqual",
          "description": "Checks if values equal.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 2
            },
            "end": {
              "line": 119,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "(String | any)",
              "description": "Value to compare"
            },
            {
              "name": "condition",
              "type": "(String | any)",
              "description": "Comparator value"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if objects matches."
          }
        },
        {
          "name": "isNotEqual",
          "description": "Oposite of `isEqual()`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 127,
              "column": 2
            },
            "end": {
              "line": 129,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "(String | any)",
              "description": "Value to compare"
            },
            {
              "name": "condition",
              "type": "(String | any)",
              "description": "Comparator value"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "False if objects matches."
          }
        },
        {
          "name": "isLessThan",
          "description": "Checks if value is less than comparator.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 137,
              "column": 2
            },
            "end": {
              "line": 144,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "(String | any)",
              "description": "Value to compare"
            },
            {
              "name": "condition",
              "type": "(String | any)",
              "description": "Comparator value"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if value is less than condition."
          }
        },
        {
          "name": "isLessThanEqual",
          "description": "Checks if value is less than or equal to comparator.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 152,
              "column": 2
            },
            "end": {
              "line": 159,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "(String | any)",
              "description": "Value to compare"
            },
            {
              "name": "condition",
              "type": "(String | any)",
              "description": "Comparator value"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if value is less than or equal to `condition`."
          }
        },
        {
          "name": "isGreaterThan",
          "description": "Checks if value is greater than comparator.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 167,
              "column": 2
            },
            "end": {
              "line": 174,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "(String | any)",
              "description": "Value to compare"
            },
            {
              "name": "condition",
              "type": "(String | any)",
              "description": "Comparator value"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if value is greater than `condition`."
          }
        },
        {
          "name": "isGreaterThanEqual",
          "description": "Checks if value is greater than or equal to comparator.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 182,
              "column": 2
            },
            "end": {
              "line": 189,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "(String | any)",
              "description": "Value to compare"
            },
            {
              "name": "condition",
              "type": "(String | any)",
              "description": "Comparator value"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if value is greater than or equal to `condition`."
          }
        },
        {
          "name": "contains",
          "description": "Checks if value contains the `condition`.\nIt works on strings, arrays and objects.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 2
            },
            "end": {
              "line": 218,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "(String | any)",
              "description": "Value to compare"
            },
            {
              "name": "condition",
              "type": "(String | any)",
              "description": "Comparator value"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if value contains the `condition`."
          }
        },
        {
          "name": "isRegex",
          "description": "Checks if `value` can be tested agains regular expression.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 226,
              "column": 2
            },
            "end": {
              "line": 235,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "(String | any)",
              "description": "Value to compare"
            },
            {
              "name": "condition",
              "type": "(String | any)",
              "description": "Comparator value - regex string."
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "Value of calling `test()` function on stirng."
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 23,
          "column": 7
        },
        "end": {
          "line": 236,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "PolymerElement",
      "name": "LogicElements.RequestLogicCondition",
      "attributes": [
        {
          "name": "enabled",
          "description": "A flag to determine if the condition is enabled.\nWhen set the `satisfied()` function always returns `false`.",
          "sourceRange": {
            "start": {
              "line": 30,
              "column": 6
            },
            "end": {
              "line": 30,
              "column": 22
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "source",
          "description": "Condition data source",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 6
            },
            "end": {
              "line": 34,
              "column": 20
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "operator",
          "description": "The comparator name",
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 6
            },
            "end": {
              "line": 38,
              "column": 22
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "condition",
          "description": "A value to test against the source value.",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 23
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "request-logic-condition"
    },
    {
      "description": "An element that runs request / response action.",
      "summary": "",
      "path": "request-logic-action.js",
      "properties": [
        {
          "name": "extractor",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 2
            },
            "end": {
              "line": 82,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "source",
          "type": "string | null | undefined",
          "description": "Action's source value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 29,
              "column": 6
            },
            "end": {
              "line": 29,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "_sourcePath",
          "type": "Array.<String>",
          "description": "Source as a path.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 6
            },
            "end": {
              "line": 37,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "action",
          "type": "string | null | undefined",
          "description": "An action to perform.\nSupported actions are:\n\n- assign-variable\n- store-variable",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 45,
              "column": 6
            },
            "end": {
              "line": 45,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "destination",
          "type": "string | null | undefined",
          "description": "The destination variable name.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 49,
              "column": 6
            },
            "end": {
              "line": 49,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "conditions",
          "type": "Array.<Object>",
          "description": "List of conditions to use. See RequestLogicCondition class for\ndescription.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 6
            },
            "end": {
              "line": 55,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "_conditions",
          "type": "Array | null | undefined",
          "description": "Computed list of condition instances",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 57,
              "column": 6
            },
            "end": {
              "line": 60,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "iterator",
          "type": "Object | null | undefined",
          "description": "Iterator object.\nSee `request-actions-panel` for more details.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 6
            },
            "end": {
              "line": 65,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "iteratorEnabled",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 6
            },
            "end": {
              "line": 66,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_computeSourcePath",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 2
            },
            "end": {
              "line": 86,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "source"
            }
          ]
        },
        {
          "name": "_prepareConditions",
          "description": "Prepares list of condition objects.\nIt throws an error if condition is not validated.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 2
            },
            "end": {
              "line": 113,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "conditions",
              "type": "Array.<Object>",
              "description": "List of condition model."
            }
          ],
          "return": {
            "type": "(Array.<RequestLogicCondition> | undefined)",
            "desc": "Liost of condition class\ninstances or undefined when no argument."
          }
        },
        {
          "name": "run",
          "description": "Runs the request hook action.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 124,
              "column": 2
            },
            "end": {
              "line": 130,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Request",
              "description": "ARC request object"
            },
            {
              "name": "response",
              "type": "Response",
              "description": "ARC response object"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to Boolean `true` if the action was\nperformed or `false` if the action wasn't performed because haven't meet\ndefined conditions."
          }
        },
        {
          "name": "_execute",
          "description": "Executes the action after the condisions are meet.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 138,
              "column": 2
            },
            "end": {
              "line": 147,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Request",
              "description": "ARC request object"
            },
            {
              "name": "response",
              "type": "Response",
              "description": "ARC response object"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved fo Boolean `true`"
          }
        },
        {
          "name": "_areConditionsMeet",
          "description": "Checks is conditions for the actions are meet.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 2
            },
            "end": {
              "line": 166,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Request",
              "description": "ARC request object"
            },
            {
              "name": "response",
              "type": "Response",
              "description": "ARC response object"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "False of any of the conditions aren't meet."
          }
        },
        {
          "name": "_performAction",
          "description": "Performs action encoded in the configuration object.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 173,
              "column": 2
            },
            "end": {
              "line": 179,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "String",
              "description": "Value read from the request / response."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved when the action is performed."
          }
        },
        {
          "name": "_assignVariable",
          "description": "Assigns value to a variable.\nIt sends an event (Custom Event in a browser or EventEmmiter in node)\nso the application can handle change of the variable in a correct way.\nThis event mean to update variable value in memory only. The implementation\nshould not store the new value in the data store.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 190,
              "column": 2
            },
            "end": {
              "line": 201,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "?String",
              "description": "A value read from the source path."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "A promise resolved when the value is updated."
          }
        },
        {
          "name": "_storeVariable",
          "description": "Assigns value to a variable.\nIt sends an event (Custom Event in a browser or EventEmmiter in node)\nso the application can handle change of the variable in a correct way.\n\nThis event mean to update variable value and store it in the data store.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 212,
              "column": 2
            },
            "end": {
              "line": 223,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "?String",
              "description": "A value read from the source path."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "A promise resolved when the value is updated."
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 23,
          "column": 7
        },
        "end": {
          "line": 224,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "PolymerElement",
      "name": "LogicElements.RequestLogicAction",
      "attributes": [
        {
          "name": "source",
          "description": "Action's source value",
          "sourceRange": {
            "start": {
              "line": 29,
              "column": 6
            },
            "end": {
              "line": 29,
              "column": 20
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "action",
          "description": "An action to perform.\nSupported actions are:\n\n- assign-variable\n- store-variable",
          "sourceRange": {
            "start": {
              "line": 45,
              "column": 6
            },
            "end": {
              "line": 45,
              "column": 20
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "destination",
          "description": "The destination variable name.",
          "sourceRange": {
            "start": {
              "line": 49,
              "column": 6
            },
            "end": {
              "line": 49,
              "column": 25
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "conditions",
          "description": "List of conditions to use. See RequestLogicCondition class for\ndescription.",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 6
            },
            "end": {
              "line": 55,
              "column": 23
            }
          },
          "metadata": {},
          "type": "Array.<Object>"
        },
        {
          "name": "iterator",
          "description": "Iterator object.\nSee `request-actions-panel` for more details.",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 6
            },
            "end": {
              "line": 65,
              "column": 22
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "iterator-enabled",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 6
            },
            "end": {
              "line": 66,
              "column": 30
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "request-logic-action"
    },
    {
      "description": "A component responsible for logic for ARC's request and responses actions.\n\nActions are logical operations that the user can define in the request panel\nwhich the result is assigned to a variable.",
      "summary": "",
      "path": "request-hooks-logic.js",
      "properties": [
        {
          "name": "jexlPath",
          "type": "string | null | undefined",
          "description": "A reference name to the Jexl object.\nUse dot notation to access it from the `window` object.\nTo set class pointer use `jexl` property.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 44,
              "column": 6
            },
            "end": {
              "line": 44,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "jexl",
          "type": "Object | null | undefined",
          "description": "A Jexl class reference.\nIf this value is set it must be a pointer to the Jexl class and\n`jexlPath` is ignored.\nThis property is set automatically when `jexlPath` is processed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 51,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 18
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 61,
              "column": 2
            },
            "end": {
              "line": 65,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 2
            },
            "end": {
              "line": 70,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handler",
          "description": "A handler for the `run-response-actions` custom event.\nIt cancels the event and processes the actions.\nSee componnent description for event details info.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 77,
              "column": 2
            },
            "end": {
              "line": 84,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "processActions",
          "description": "Processes actions when response object is ready.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 2
            },
            "end": {
              "line": 107,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "actions",
              "type": "Array.<Object>",
              "description": "List of actions to perform"
            },
            {
              "name": "request",
              "type": "Object",
              "description": "ArcRequest object. See this doc for data model:\nhttps://github.com/advanced-rest-client/api-components-api/blob/master/docs/api-request-and-response.md#api-request"
            },
            {
              "name": "response",
              "type": "Object",
              "description": "ArcResponse object. See this doc for data model:\nhttps://github.com/advanced-rest-client/api-components-api/blob/master/docs/api-request-and-response.md#api-request"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "A promise resolved when actions were performed."
          }
        },
        {
          "name": "_evaluateAction",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 109,
              "column": 2
            },
            "end": {
              "line": 120,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "action"
            }
          ]
        },
        {
          "name": "_copyAction",
          "description": "Creates a copy of the actio object.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 128,
              "column": 2
            },
            "end": {
              "line": 139,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "action",
              "type": "Object",
              "description": "Action model"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Deep copy of the action model."
          }
        },
        {
          "name": "_createLogicElement",
          "description": "Creates instance of `request-logic-action` element, sets its properties and\ninserts it into shadow DOM.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 146,
              "column": 2
            },
            "end": {
              "line": 156,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "action",
              "type": "Object",
              "description": "Action definition"
            }
          ],
          "return": {
            "type": "Element"
          }
        },
        {
          "name": "_runRecursive",
          "description": "Runs acrions recuresively until all actions are executed.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 164,
              "column": 2
            },
            "end": {
              "line": 174,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "actions",
              "type": "Array.<Object>",
              "description": "Action definition"
            },
            {
              "name": "request",
              "type": "Object",
              "description": "ARC request object"
            },
            {
              "name": "response",
              "type": "Object",
              "description": "ARC response object"
            }
          ],
          "return": {
            "type": "Promise"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 27,
          "column": 7
        },
        "end": {
          "line": 175,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "PolymerElement",
      "name": "LogicElements.RequestHooksLogic",
      "attributes": [
        {
          "name": "jexl-path",
          "description": "A reference name to the Jexl object.\nUse dot notation to access it from the `window` object.\nTo set class pointer use `jexl` property.",
          "sourceRange": {
            "start": {
              "line": 44,
              "column": 6
            },
            "end": {
              "line": 44,
              "column": 22
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "jexl",
          "description": "A Jexl class reference.\nIf this value is set it must be a pointer to the Jexl class and\n`jexlPath` is ignored.\nThis property is set automatically when `jexlPath` is processed.",
          "sourceRange": {
            "start": {
              "line": 51,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 18
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "request-hooks-logic"
    }
  ],
  "classes": [
    {
      "description": "Class responsible for extracting data from JSON values.",
      "summary": "",
      "path": "request-data-extractor.js",
      "properties": [
        {
          "name": "source",
          "type": "Array.<String>",
          "description": "Source of the data split by `.` character",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 4
            },
            "end": {
              "line": 34,
              "column": 15
            }
          },
          "metadata": {},
          "defaultValue": "opts.source.split('.')"
        },
        {
          "name": "operator",
          "type": "String",
          "description": "Comparision operator",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 39,
              "column": 4
            },
            "end": {
              "line": 39,
              "column": 17
            }
          },
          "metadata": {},
          "defaultValue": "opts.operator"
        },
        {
          "name": "condition",
          "type": "(String | Number)",
          "description": "Comparision value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 44,
              "column": 4
            },
            "end": {
              "line": 44,
              "column": 18
            }
          },
          "metadata": {},
          "defaultValue": "opts.condition"
        }
      ],
      "methods": [
        {
          "name": "_validate",
          "description": "Validates passed options and sets `valid` flag.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 73,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "opts",
              "type": "Object",
              "description": "Iterator options"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True when options are valid"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 19,
          "column": 7
        },
        "end": {
          "line": 74,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "ActionIterableObject"
    },
    {
      "description": "Class responsible for extracting data from JSON values.",
      "summary": "",
      "path": "request-data-extractor.js",
      "properties": [],
      "methods": [
        {
          "name": "_processJson",
          "description": "Processes input JSON data and returns Array or Object. It returns\n`undefined` if the data are empty, falsy or a primitive (except for JSON\nstrings).",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 2
            },
            "end": {
              "line": 122,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data",
              "type": "(Array | Object | String)",
              "description": "Data to process"
            }
          ],
          "return": {
            "type": "(Array | Object | undefined)",
            "desc": "JS object or undefined if conversion\nwasn't possible."
          }
        },
        {
          "name": "extract",
          "description": "Extracts the data for given conditions.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 128,
              "column": 2
            },
            "end": {
              "line": 137,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "(String | undefined)",
            "desc": "Data found for given conditions."
          }
        },
        {
          "name": "_getValue",
          "description": "Reads a value of an JSON object for given path.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 2
            },
            "end": {
              "line": 171,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "json",
              "type": "(Object | Array)",
              "description": "JSON value to read"
            },
            {
              "name": "path",
              "type": "Array.<String>",
              "description": "Path to search for the value."
            },
            {
              "name": "iterableOptions",
              "type": "Object"
            }
          ],
          "return": {
            "type": "(String | undefined)",
            "desc": "Value for given path."
          }
        },
        {
          "name": "_getIterableValue",
          "description": "Searches for a value in iterable object.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 181,
              "column": 2
            },
            "end": {
              "line": 187,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "json",
              "type": "(Object | Array)",
              "description": "Iterable object"
            },
            {
              "name": "path",
              "type": "Array.<String>",
              "description": "Path for the value"
            },
            {
              "name": "opts",
              "type": "ActionIterableObject",
              "description": "Iterable object configuration"
            }
          ],
          "return": {
            "type": "(Object | undefined)",
            "desc": "Object that matches iterable condition\nor undefined if none matches the condition."
          }
        },
        {
          "name": "_getIterableValueArray",
          "description": "Searches for a value in Array.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 197,
              "column": 2
            },
            "end": {
              "line": 215,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "json",
              "type": "(Object | Array)",
              "description": "Iterable object"
            },
            {
              "name": "path",
              "type": "Array.<String>",
              "description": "Path for the value"
            },
            {
              "name": "opts",
              "type": "ActionIterableObject",
              "description": "Iterable object configuration"
            }
          ],
          "return": {
            "type": "(Object | undefined)",
            "desc": "Object that matches iterable condition\nor undefined if none matches the condition."
          }
        },
        {
          "name": "_getIterableValueObject",
          "description": "Searches for a value in JS Object.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 225,
              "column": 2
            },
            "end": {
              "line": 249,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "json",
              "type": "(Object | Array)",
              "description": "Iterable object"
            },
            {
              "name": "path",
              "type": "Array.<String>",
              "description": "Path for the value"
            },
            {
              "name": "opts",
              "type": "ActionIterableObject",
              "description": "Iterable object configuration"
            }
          ],
          "return": {
            "type": "(Object | undefined)",
            "desc": "Object that matches iterable condition\nor undefined if none matches the condition."
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 78,
          "column": 7
        },
        "end": {
          "line": 250,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "JsonExtractor"
    },
    {
      "description": "A helper class to extract data from an XML response.",
      "summary": "",
      "path": "request-data-extractor.js",
      "properties": [],
      "methods": [
        {
          "name": "extract",
          "description": "Gets a value of the XML type string for given path.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 277,
              "column": 2
            },
            "end": {
              "line": 284,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "(String | undefined)",
            "desc": "Value for given path."
          }
        },
        {
          "name": "_getValue",
          "description": "Gets a value for the XML document for given path.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 292,
              "column": 2
            },
            "end": {
              "line": 312,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "Document",
              "description": "DOM document."
            },
            {
              "name": "path",
              "type": "Array.<String>",
              "description": "Path to search for the value."
            }
          ],
          "return": {
            "type": "(String | undefined)",
            "desc": "Value for given path."
          }
        },
        {
          "name": "_valueForAttr",
          "description": "Reads attribute value for current path.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 321,
              "column": 2
            },
            "end": {
              "line": 335,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "Element",
              "description": "DOM element object"
            },
            {
              "name": "part",
              "type": "Number",
              "description": "Current part of the path."
            }
          ],
          "return": {
            "type": "(String | undefined)",
            "desc": "Returned value for path or undefined\nif not found."
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 254,
          "column": 7
        },
        "end": {
          "line": 336,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "XmlExtractor"
    }
  ]
}
