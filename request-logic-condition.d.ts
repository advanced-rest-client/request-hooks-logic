/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   request-logic-condition.html
 */

/// <reference path="../polymer/types/polymer-element.d.ts" />
/// <reference path="request-data-extractor.d.ts" />

declare namespace LogicElements {

  /**
   * An element that performs a logic condition check defined in request / response
   * actions for ARC.
   */
  class RequestLogicCondition extends Polymer.Element {
    readonly extractor: object|null;

    /**
     * A flag to determine if the condition is enabled.
     * When set the `satisfied()` function always returns `false`.
     */
    enabled: boolean|null|undefined;

    /**
     * Condition data source
     */
    source: string|null|undefined;

    /**
     * The comparator name
     */
    operator: string|null|undefined;

    /**
     * A value to test against the source value.
     */
    condition: string|null|undefined;

    /**
     * Checks if the condition has been satified for current request and response
     * objects.
     *
     * @param request The ARC request object. Comnatins `url`, `method`,
     * `headers` and `payload` (all strings)
     * @param response {Object} ARC Response object as defined in
     * https://github.com/advanced-rest-client/api-components-api/blob/master/
     * docs/api-request-and-response.md
     * @returns True if the condition is satisfied and false otherwise.
     */
    satisfied(request: object|null, response: object|null): Boolean|null;

    /**
     * Checks if given condition is satisfied by both value and operator.
     *
     * @param value Value rread from the response / request object
     * @param operator Comparition term.
     * @param condition Value to compare.
     * @returns True if the condition is satisfied and false otherwise.
     */
    checkCondition(value: any|null, operator: String|null, condition: String|null): Boolean|null;

    /**
     * Checks if values equal.
     *
     * @param value Value to compare
     * @param condition Comparator value
     * @returns True if objects matches.
     */
    isEqual(value: String|any|null, condition: String|any|null): Boolean|null;

    /**
     * Oposite of `isEqual()`.
     *
     * @param value Value to compare
     * @param condition Comparator value
     * @returns False if objects matches.
     */
    isNotEqual(value: String|any|null, condition: String|any|null): Boolean|null;

    /**
     * Checks if value is less than comparator.
     *
     * @param value Value to compare
     * @param condition Comparator value
     * @returns True if value is less than condition.
     */
    isLessThan(value: String|any|null, condition: String|any|null): Boolean|null;

    /**
     * Checks if value is less than or equal to comparator.
     *
     * @param value Value to compare
     * @param condition Comparator value
     * @returns True if value is less than or equal to `condition`.
     */
    isLessThanEqual(value: String|any|null, condition: String|any|null): Boolean|null;

    /**
     * Checks if value is greater than comparator.
     *
     * @param value Value to compare
     * @param condition Comparator value
     * @returns True if value is greater than `condition`.
     */
    isGreaterThan(value: String|any|null, condition: String|any|null): Boolean|null;

    /**
     * Checks if value is greater than or equal to comparator.
     *
     * @param value Value to compare
     * @param condition Comparator value
     * @returns True if value is greater than or equal to `condition`.
     */
    isGreaterThanEqual(value: String|any|null, condition: String|any|null): Boolean|null;

    /**
     * Checks if value contains the `condition`.
     * It works on strings, arrays and objects.
     *
     * @param value Value to compare
     * @param condition Comparator value
     * @returns True if value contains the `condition`.
     */
    contains(value: String|any|null, condition: String|any|null): Boolean|null;

    /**
     * Checks if `value` can be tested agains regular expression.
     *
     * @param value Value to compare
     * @param condition Comparator value - regex string.
     * @returns Value of calling `test()` function on stirng.
     */
    isRegex(value: String|any|null, condition: String|any|null): Boolean|null;
  }
}

interface HTMLElementTagNameMap {
  "request-logic-condition": LogicElements.RequestLogicCondition;
}
