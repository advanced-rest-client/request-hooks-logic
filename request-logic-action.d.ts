/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   request-logic-action.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {LitElement} from 'lit-element';

export {RequestLogicAction};

declare namespace LogicElements {

  /**
   * An element that runs request / response action.
   */
  class RequestLogicAction extends LitElement {

    /**
     * Action's source value
     */
    source: string|null|undefined;

    /**
     * List of conditions to use. See RequestLogicCondition class for
     * description.
     */
    conditions: Array<object|null>|null;
    readonly extractor: Element|null;

    /**
     * Source as a path.
     */
    _sourcePath: Array<String|null>|null;

    /**
     * An action to perform.
     * Supported actions are:
     *
     * - assign-variable
     * - store-variable
     */
    action: string|null|undefined;

    /**
     * The destination variable name.
     */
    destination: string|null|undefined;

    /**
     * Computed list of condition instances
     */
    _conditionsList: any[]|null|undefined;

    /**
     * Iterator object.
     * See `request-actions-panel` for more details.
     */
    iterator: object|null|undefined;
    iteratorEnabled: boolean|null|undefined;
    constructor();
    _computeSourcePath(source: any): any;

    /**
     * Prepares list of condition objects.
     * It throws an error if condition is not validated.
     *
     * @param conditions List of condition model.
     * @returns Liost of condition class
     * instances or undefined when no argument.
     */
    _prepareConditions(conditions: Array<object|null>|null): Array<RequestLogicCondition|null>|null|undefined;

    /**
     * Runs the request hook action.
     *
     * @param request ARC request object
     * @param response ARC response object
     * @returns Promise resolved to Boolean `true` if the action was
     * performed or `false` if the action wasn't performed because haven't meet
     * defined conditions.
     */
    run(request: Request|null, response: Response|null): Promise<any>|null;

    /**
     * Executes the action after the condisions are meet.
     *
     * @param request ARC request object
     * @param response ARC response object
     * @returns Promise resolved fo Boolean `true`
     */
    _execute(request: Request|null, response: Response|null): Promise<any>|null;

    /**
     * Checks is conditions for the actions are meet.
     *
     * @param request ARC request object
     * @param response ARC response object
     * @returns False of any of the conditions aren't meet.
     */
    _areConditionsMeet(request: Request|null, response: Response|null): Boolean|null;

    /**
     * Performs action encoded in the configuration object.
     *
     * @param value Value read from the request / response.
     * @returns Promise resolved when the action is performed.
     */
    _performAction(value: String|null): Promise<any>|null;

    /**
     * Assigns value to a variable.
     * It sends an event (Custom Event in a browser or EventEmmiter in node)
     * so the application can handle change of the variable in a correct way.
     * This event mean to update variable value in memory only. The implementation
     * should not store the new value in the data store.
     *
     * @param value A value read from the source path.
     * @returns A promise resolved when the value is updated.
     */
    _assignVariable(value: String|null): Promise<any>|null;

    /**
     * Assigns value to a variable.
     * It sends an event (Custom Event in a browser or EventEmmiter in node)
     * so the application can handle change of the variable in a correct way.
     *
     * This event mean to update variable value and store it in the data store.
     *
     * @param value A value read from the source path.
     * @returns A promise resolved when the value is updated.
     */
    _storeVariable(value: String|null): Promise<any>|null;
  }
}

declare global {

  interface HTMLElementTagNameMap {
    "request-logic-action": LogicElements.RequestLogicAction;
  }
}
